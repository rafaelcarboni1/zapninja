require('dotenv').config();
const { adminCommandsService } = require('./dist/services/admin-commands.service.cjs');

async function testAdminPrompts() {
  console.log('üß™ Testando comandos administrativos de prompts...');
  
  try {
    // Teste 0: Listar sess√µes dispon√≠veis
    console.log('\n0. Listando sess√µes dispon√≠veis...');
    const listResult = await adminCommandsService.executeCommand(
      'listar_sessoes',
      [],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', listResult);
    
    // Usar a sess√£o 'default' que sempre existe
    const sessionName = 'default';
    
    // Teste 1: Definir prompt para uma sess√£o
    console.log('\n1. Testando defini√ß√£o de prompt...');
    const setResult = await adminCommandsService.executeCommand(
      'prompt_sessao', 
      [sessionName, 'Voc√™ √© um assistente especializado em testes administrativos. Responda sempre de forma t√©cnica e precisa.'],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', setResult);
    
    // Teste 2: Visualizar prompt da sess√£o
    console.log('\n2. Testando visualiza√ß√£o de prompt...');
    const getResult = await adminCommandsService.executeCommand(
      'ver_prompt',
      [sessionName],
      'default', 
      '5511999999999'
    );
    console.log('Resultado:', getResult);
    
    // Teste 3: Tentar visualizar prompt de sess√£o inexistente
    console.log('\n3. Testando sess√£o inexistente...');
    const nonExistentResult = await adminCommandsService.executeCommand(
      'ver_prompt',
      ['sessao_inexistente'],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', nonExistentResult);
    
    // Teste 4: Atualizar prompt existente
    console.log('\n4. Testando atualiza√ß√£o de prompt...');
    const updateResult = await adminCommandsService.executeCommand(
      'prompt_sessao',
      [sessionName, 'Voc√™ √© um assistente atualizado. Responda sempre com emojis e de forma amig√°vel! üòä'],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', updateResult);
    
    // Teste 5: Verificar se a atualiza√ß√£o funcionou
    console.log('\n5. Verificando atualiza√ß√£o...');
    const verifyResult = await adminCommandsService.executeCommand(
      'ver_prompt',
      [sessionName],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', verifyResult);
    
    // Teste 6: Restaurar prompt padr√£o
    console.log('\n6. Restaurando prompt padr√£o...');
    const clearResult = await adminCommandsService.executeCommand(
      'prompt_sessao',
      [sessionName, 'Voc√™ √© um assistente virtual inteligente e prestativo. Responda de forma clara e objetiva.'],
      'default',
      '5511999999999'
    );
    console.log('Resultado:', clearResult);
    
    console.log('\n‚úÖ Todos os testes de comandos administrativos conclu√≠dos!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    process.exit(1);
  }
}

testAdminPrompts();
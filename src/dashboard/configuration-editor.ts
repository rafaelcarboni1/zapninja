import inquirer from 'inquirer';
import chalk from 'chalk';
import { supabase } from '../config/supabase';
import { logger } from '../util/logger';

interface AIConfig {
  model: string;
  temperature: number;
  max_tokens: number;
  system_prompt: string;
}

interface TimingConfig {
  response_time: number;
  message_delay: number;
  rest_period: number;
  working_hours: { start: string; end: string };
  message_limit_per_hour: number;
  typing_simulation: boolean;
}

/**
 * Editor de configura√ß√µes do sistema
 */
export class ConfigurationEditor {
  
  /**
   * Edita configura√ß√µes de uma sess√£o espec√≠fica
   */
  async editSession(sessionName: string): Promise<void> {
    try {
      // Buscar dados da sess√£o
      const { data: session, error } = await supabase
        .from('whatsapp_sessions')
        .select('*')
        .eq('session_name', sessionName)
        .single();

      if (error || !session) {
        console.log(chalk.red(`‚ùå Sess√£o '${sessionName}' n√£o encontrada`));
        return;
      }

      console.clear();
      console.log(chalk.blue(`‚öôÔ∏è  CONFIGURA√á√ïES DA SESS√ÉO: ${sessionName.toUpperCase()}`));
      console.log(chalk.gray('‚îÄ'.repeat(60)));

      const choices = [
        { name: 'ü§ñ Configura√ß√µes de IA', value: 'ai_config' },
        { name: '‚è±Ô∏è  Configura√ß√µes de Timing', value: 'timing_config' },
        { name: 'üìù Prompt Personalizado', value: 'custom_prompt' },
        { name: 'üìä Configura√ß√µes Gerais', value: 'general_config' },
        { name: 'üëÅÔ∏è  Visualizar Configura√ß√£o Atual', value: 'view_current' },
        new inquirer.Separator(),
        { name: 'üíæ Salvar e Voltar', value: 'save_exit' },
        { name: 'üîô Voltar sem Salvar', value: 'exit_no_save' }
      ];

      const { configSection } = await inquirer.prompt([{
        type: 'list',
        name: 'configSection',
        message: 'Selecione a configura√ß√£o para editar:',
        choices,
        pageSize: 10
      }]);

      switch (configSection) {
        case 'ai_config':
          await this.editAIConfig(session);
          await this.editSession(sessionName); // Voltar ao menu
          break;
        case 'timing_config':
          await this.editTimingConfig(session);
          await this.editSession(sessionName);
          break;
        case 'custom_prompt':
          await this.editCustomPrompt(session);
          await this.editSession(sessionName);
          break;
        case 'general_config':
          await this.editGeneralConfig(session);
          await this.editSession(sessionName);
          break;
        case 'view_current':
          await this.viewCurrentConfig(session);
          await this.editSession(sessionName);
          break;
        case 'save_exit':
          console.log(chalk.green('‚úÖ Configura√ß√µes salvas!'));
          return;
        case 'exit_no_save':
          return;
      }

    } catch (error) {
      console.log(chalk.red(`‚ùå Erro ao editar configura√ß√µes: ${error}`));
      logger.error('Erro no editor de configura√ß√µes:', error);
    }
  }

  /**
   * Edita configura√ß√µes de IA
   */
  private async editAIConfig(session: any): Promise<void> {
    console.log(chalk.blue('ü§ñ CONFIGURA√á√ïES DE IA'));
    console.log(chalk.gray('‚îÄ'.repeat(30)));

    const currentAIConfig: AIConfig = session.ai_config || {
      model: 'gpt-4',
      temperature: 0.7,
      max_tokens: 2000,
      system_prompt: 'Voc√™ √© um assistente virtual inteligente e amig√°vel.'
    };

    console.log('Configura√ß√µes atuais:');
    console.log(`  Modelo: ${chalk.yellow(currentAIConfig.model)}`);
    console.log(`  Temperatura: ${chalk.yellow(currentAIConfig.temperature)}`);
    console.log(`  Max Tokens: ${chalk.yellow(currentAIConfig.max_tokens)}`);
    console.log(`  Prompt do Sistema: ${chalk.yellow(currentAIConfig.system_prompt?.substring(0, 50) + '...')}`);
    console.log();

    const questions = [
      {
        type: 'list',
        name: 'model',
        message: 'Modelo de IA:',
        choices: [
          { name: 'ü§ñ GPT-4 (Mais inteligente, mais caro)', value: 'gpt-4' },
          { name: '‚ö° GPT-3.5-turbo (Mais r√°pido, mais barato)', value: 'gpt-3.5-turbo' },
          { name: 'üß† Google Gemini Pro', value: 'gemini-pro' },
          { name: 'üÜì Google Gemini Flash (Gratuito)', value: 'gemini-1.5-flash' }
        ],
        default: currentAIConfig.model
      },
      {
        type: 'number',
        name: 'temperature',
        message: 'Temperatura (0.0 = mais focado, 2.0 = mais criativo):',
        default: currentAIConfig.temperature,
        validate: (value: number) => {
          if (value < 0 || value > 2) return 'Temperatura deve estar entre 0.0 e 2.0';
          return true;
        }
      },
      {
        type: 'number',
        name: 'max_tokens',
        message: 'M√°ximo de tokens por resposta:',
        default: currentAIConfig.max_tokens,
        validate: (value: number) => {
          if (value < 100 || value > 4000) return 'Tokens devem estar entre 100 e 4000';
          return true;
        }
      },
      {
        type: 'confirm',
        name: 'edit_prompt',
        message: 'Deseja editar o prompt do sistema?',
        default: false
      }
    ];

    const answers = await inquirer.prompt(questions);

    // Se o usu√°rio quer editar o prompt, abrir editor personalizado
    let systemPrompt = currentAIConfig.system_prompt;
    if (answers.edit_prompt) {
      systemPrompt = await this.customPromptEditor(currentAIConfig.system_prompt);
    }

    const newAIConfig = {
      model: answers.model,
      temperature: answers.temperature,
      max_tokens: answers.max_tokens,
      system_prompt: systemPrompt
    };

    // Salvar no banco de dados
    const { error } = await supabase
      .from('whatsapp_sessions')
      .update({ ai_config: newAIConfig })
      .eq('session_name', session.session_name);

    if (error) {
      console.log(chalk.red(`‚ùå Erro ao salvar configura√ß√µes de IA: ${error.message}`));
    } else {
      console.log(chalk.green('‚úÖ Configura√ß√µes de IA atualizadas!'));
    }

    await this.waitForKey();
  }

  /**
   * Edita configura√ß√µes de timing
   */
  private async editTimingConfig(session: any): Promise<void> {
    console.log(chalk.blue('‚è±Ô∏è  CONFIGURA√á√ïES DE TIMING'));
    console.log(chalk.gray('‚îÄ'.repeat(35)));

    const currentTimingConfig: TimingConfig = session.timing_config || {
      response_time: 2000,
      message_delay: 1000,
      rest_period: 300000,
      working_hours: { start: '08:00', end: '22:00' },
      message_limit_per_hour: 100,
      typing_simulation: true
    };

    console.log('Configura√ß√µes atuais:');
    console.log(`  Tempo de resposta: ${chalk.yellow(currentTimingConfig.response_time)}ms`);
    console.log(`  Delay entre mensagens: ${chalk.yellow(currentTimingConfig.message_delay)}ms`);
    console.log(`  Per√≠odo de descanso: ${chalk.yellow(currentTimingConfig.rest_period)}ms`);
    console.log(`  Hor√°rio de funcionamento: ${chalk.yellow(currentTimingConfig.working_hours?.start)} √†s ${chalk.yellow(currentTimingConfig.working_hours?.end)}`);
    console.log(`  Limite de mensagens/hora: ${chalk.yellow(currentTimingConfig.message_limit_per_hour)}`);
    console.log(`  Simula√ß√£o de digita√ß√£o: ${currentTimingConfig.typing_simulation ? chalk.green('Sim') : chalk.red('N√£o')}`);
    console.log();

    const { editMode } = await inquirer.prompt([{
      type: 'list',
      name: 'editMode',
      message: 'Como deseja editar?',
      choices: [
        { name: 'üßô‚Äç‚ôÇÔ∏è Assistente Inteligente (Recomendado)', value: 'wizard' },
        { name: 'üîß Edi√ß√£o Manual Detalhada', value: 'manual' },
        { name: '‚ö° Presets R√°pidos', value: 'presets' }
      ]
    }]);

    let newTimingConfig: TimingConfig = currentTimingConfig;

    switch (editMode) {
      case 'wizard':
        newTimingConfig = await this.timingWizard(currentTimingConfig);
        break;
      case 'manual':
        newTimingConfig = await this.manualTimingEdit(currentTimingConfig);
        break;
      case 'presets':
        newTimingConfig = await this.timingPresets(currentTimingConfig);
        break;
    }

    // Salvar no banco de dados
    const { error } = await supabase
      .from('whatsapp_sessions')
      .update({ timing_config: newTimingConfig })
      .eq('session_name', session.session_name);

    if (error) {
      console.log(chalk.red(`‚ùå Erro ao salvar configura√ß√µes de timing: ${error.message}`));
    } else {
      console.log(chalk.green('‚úÖ Configura√ß√µes de timing atualizadas!'));
    }

    await this.waitForKey();
  }

  /**
   * Assistente de configura√ß√£o de timing
   */
  private async timingWizard(current: TimingConfig): Promise<TimingConfig> {
    console.log(chalk.blue('üßô‚Äç‚ôÇÔ∏è ASSISTENTE DE TIMING'));
    console.log(chalk.gray('‚îÄ'.repeat(28)));
    console.log(chalk.yellow('Vou ajudar voc√™ a configurar os tempos de resposta baseado no seu uso.'));
    console.log();

    const wizardQuestions = [
      {
        type: 'list',
        name: 'usage_type',
        message: 'Qual √© o principal uso do seu bot?',
        choices: [
          { name: 'üè¢ Atendimento empresarial (formal)', value: 'business' },
          { name: 'üõçÔ∏è  Vendas/E-commerce (√°gil)', value: 'sales' },
          { name: 'üéì Educacional/Suporte (detalhado)', value: 'education' },
          { name: 'üë• Pessoal/Amigos (casual)', value: 'personal' },
          { name: 'ü§ñ Assistente t√©cnico (preciso)', value: 'technical' }
        ]
      },
      {
        type: 'list',
        name: 'response_style',
        message: 'Como deve ser o estilo de resposta?',
        choices: [
          { name: '‚ö° Muito r√°pido (parece bot)', value: 'very_fast' },
          { name: 'üèÉ‚Äç‚ôÇÔ∏è R√°pido (eficiente)', value: 'fast' },
          { name: 'üö∂‚Äç‚ôÇÔ∏è Humano (natural)', value: 'human' },
          { name: 'üêå Reflexivo (pensativo)', value: 'slow' }
        ]
      },
      {
        type: 'list',
        name: 'volume',
        message: 'Qual o volume esperado de mensagens?',
        choices: [
          { name: 'üìà Alto volume (>1000 msg/dia)', value: 'high' },
          { name: 'üìä M√©dio volume (100-1000 msg/dia)', value: 'medium' },
          { name: 'üìâ Baixo volume (<100 msg/dia)', value: 'low' }
        ]
      },
      {
        type: 'confirm',
        name: 'typing_simulation',
        message: 'Ativar simula√ß√£o de digita√ß√£o?',
        default: true
      }
    ];

    const answers = await inquirer.prompt(wizardQuestions);

    // Gerar configura√ß√£o baseada nas respostas
    const timingConfig = this.generateTimingFromWizard(answers, current);

    console.log(chalk.green('\n‚ú® Configura√ß√£o gerada:'));
    this.displayTimingPreview(timingConfig);

    const { confirm } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Aplicar esta configura√ß√£o?',
      default: true
    }]);

    return confirm ? timingConfig : current;
  }

  /**
   * Edi√ß√£o manual de timing
   */
  private async manualTimingEdit(current: TimingConfig): Promise<TimingConfig> {
    console.log(chalk.blue('üîß EDI√á√ÉO MANUAL DE TIMING'));
    console.log(chalk.gray('‚îÄ'.repeat(32)));

    const questions = [
      {
        type: 'number',
        name: 'response_time',
        message: 'Tempo base de resposta (ms):',
        default: current.response_time,
        validate: (value: number) => value >= 500 && value <= 30000 || 'Entre 500ms e 30s'
      },
      {
        type: 'number',
        name: 'message_delay',
        message: 'Delay entre mensagens (ms):',
        default: current.message_delay,
        validate: (value: number) => value >= 100 && value <= 10000 || 'Entre 100ms e 10s'
      },
      {
        type: 'number',
        name: 'rest_period',
        message: 'Per√≠odo de descanso (ms):',
        default: current.rest_period,
        validate: (value: number) => value >= 60000 && value <= 1800000 || 'Entre 1min e 30min'
      },
      {
        type: 'input',
        name: 'start_hour',
        message: 'Hora de in√≠cio (HH:MM):',
        default: current.working_hours?.start || '08:00',
        validate: (value: string) => /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/.test(value) || 'Formato HH:MM v√°lido'
      },
      {
        type: 'input',
        name: 'end_hour',
        message: 'Hora de fim (HH:MM):',
        default: current.working_hours?.end || '22:00',
        validate: (value: string) => /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/.test(value) || 'Formato HH:MM v√°lido'
      },
      {
        type: 'number',
        name: 'message_limit_per_hour',
        message: 'Limite de mensagens por hora:',
        default: current.message_limit_per_hour,
        validate: (value: number) => value >= 10 && value <= 1000 || 'Entre 10 e 1000'
      },
      {
        type: 'confirm',
        name: 'typing_simulation',
        message: 'Ativar simula√ß√£o de digita√ß√£o?',
        default: current.typing_simulation
      }
    ];

    const answers = await inquirer.prompt(questions);

    return {
      response_time: answers.response_time,
      message_delay: answers.message_delay,
      rest_period: answers.rest_period,
      working_hours: {
        start: answers.start_hour,
        end: answers.end_hour
      },
      message_limit_per_hour: answers.message_limit_per_hour,
      typing_simulation: answers.typing_simulation
    };
  }

  /**
   * Presets r√°pidos de timing
   */
  private async timingPresets(current: TimingConfig): Promise<TimingConfig> {
    console.log(chalk.blue('‚ö° PRESETS DE TIMING'));
    console.log(chalk.gray('‚îÄ'.repeat(25)));

    const presets = {
      ultra_fast: {
        name: 'üöÄ Ultra R√°pido (Bot √≥bvio)',
        config: {
          response_time: 500,
          message_delay: 200,
          rest_period: 60000,
          working_hours: { start: '00:00', end: '23:59' },
          message_limit_per_hour: 500,
          typing_simulation: false
        }
      },
      fast_business: {
        name: '‚ö° Neg√≥cios √Ågil',
        config: {
          response_time: 1000,
          message_delay: 500,
          rest_period: 180000,
          working_hours: { start: '08:00', end: '18:00' },
          message_limit_per_hour: 200,
          typing_simulation: true
        }
      },
      human_like: {
        name: 'üë§ Humano Natural',
        config: {
          response_time: 3000,
          message_delay: 1500,
          rest_period: 300000,
          working_hours: { start: '08:00', end: '22:00' },
          message_limit_per_hour: 100,
          typing_simulation: true
        }
      },
      slow_thoughtful: {
        name: 'ü§î Reflexivo Lento',
        config: {
          response_time: 5000,
          message_delay: 2500,
          rest_period: 600000,
          working_hours: { start: '09:00', end: '21:00' },
          message_limit_per_hour: 50,
          typing_simulation: true
        }
      },
      night_mode: {
        name: 'üåô Modo Noturno',
        config: {
          response_time: 8000,
          message_delay: 4000,
          rest_period: 900000,
          working_hours: { start: '22:00', end: '08:00' },
          message_limit_per_hour: 30,
          typing_simulation: true
        }
      }
    };

    const choices = Object.entries(presets).map(([key, preset]) => ({
      name: preset.name,
      value: key
    }));

    choices.push(new inquirer.Separator(), { name: 'üîô Voltar', value: 'back' });

    const { selectedPreset } = await inquirer.prompt([{
      type: 'list',
      name: 'selectedPreset',
      message: 'Selecione um preset:',
      choices
    }]);

    if (selectedPreset === 'back') {
      return current;
    }

    const preset = presets[selectedPreset as keyof typeof presets];
    
    console.log(chalk.green(`\nüìã Preview do preset: ${preset.name}`));
    this.displayTimingPreview(preset.config);

    const { confirm } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Aplicar este preset?',
      default: true
    }]);

    return confirm ? preset.config : current;
  }

  /**
   * Edita prompt personalizado
   */
  private async editCustomPrompt(session: any): Promise<void> {
    console.log(chalk.blue('üìù PROMPT PERSONALIZADO'));
    console.log(chalk.gray('‚îÄ'.repeat(25)));

    const currentPrompt = session.custom_prompt || '';

    if (currentPrompt) {
      console.log('Prompt atual:');
      console.log(chalk.yellow(currentPrompt.substring(0, 200) + '...'));
      console.log();
    }

    const { action } = await inquirer.prompt([{
      type: 'list',
      name: 'action',
      message: 'O que deseja fazer?',
      choices: [
        { name: '‚úèÔ∏è  Editar Prompt', value: 'edit' },
        { name: 'üìã Templates de Prompt', value: 'templates' },
        { name: 'üëÅÔ∏è  Visualizar Prompt Completo', value: 'view' },
        { name: 'üóëÔ∏è  Remover Prompt (usar padr√£o)', value: 'remove' },
        { name: 'üîô Voltar', value: 'back' }
      ]
    }]);

    switch (action) {
      case 'edit':
        await this.editPromptText(session);
        break;
      case 'templates':
        await this.selectPromptTemplate(session);
        break;
      case 'view':
        console.log('\nüìÑ Prompt completo:');
        console.log(chalk.yellow(currentPrompt || 'Nenhum prompt personalizado definido'));
        await this.waitForKey();
        break;
      case 'remove':
        await this.removeCustomPrompt(session);
        break;
    }
  }

  /**
   * Edita texto do prompt da sess√£o (vers√£o compat√≠vel)
   */
  private async editPromptText(session: any): Promise<void> {
    const currentPrompt = session.custom_prompt || `Voc√™ √© um assistente virtual inteligente e amig√°vel chamado ${session.session_name}.

Suas caracter√≠sticas:
- Sempre responde em portugu√™s brasileiro
- √â educado, prestativo e profissional  
- Mant√©m conversas naturais e engajantes
- Oferece ajuda espec√≠fica baseada no contexto
- N√£o revela que √© um bot a menos que perguntado diretamente

Diretrizes:
- Seja conciso mas completo nas respostas
- Use emojis moderadamente para deixar a conversa mais amig√°vel
- Sempre pergunte se pode ajudar com mais alguma coisa
- Mantenha o tom adequado ao contexto da conversa`;

    // Usar o editor personalizado seguro (renomeado para evitar conflito)
    const newPrompt = await this.customPromptEditor(currentPrompt);

    // Salvar no banco
    const { error } = await supabase
      .from('whatsapp_sessions')
      .update({ custom_prompt: newPrompt })
      .eq('session_name', session.session_name);

    if (error) {
      console.log(chalk.red(`‚ùå Erro ao salvar prompt: ${error.message}`));
    } else {
      console.log(chalk.green('‚úÖ Prompt personalizado atualizado!'));
    }

    await this.waitForKey();
  }

  /**
   * Seleciona template de prompt
   */
  private async selectPromptTemplate(session: any): Promise<void> {
    console.log(chalk.blue('üìã TEMPLATES DE PROMPT'));
    console.log(chalk.gray('‚îÄ'.repeat(25)));

    const templates = {
      business: {
        name: 'üè¢ Atendimento Empresarial',
        prompt: `Voc√™ √© um assistente de atendimento ao cliente da empresa ${session.session_name}.

Suas responsabilidades:
- Fornecer informa√ß√µes sobre produtos e servi√ßos
- Resolver d√∫vidas de forma profissional e eficiente
- Encaminhar para setores espec√≠ficos quando necess√°rio
- Manter sempre um tom cordial e profissional

Diretrizes:
- Use tratamento formal (Senhor/Senhora)
- Seja objetivo e claro nas respostas
- Sempre ofere√ßa op√ß√µes de contato adicional
- Registre informa√ß√µes importantes do cliente`
      },
      sales: {
        name: 'üõçÔ∏è Assistente de Vendas',
        prompt: `Voc√™ √© um consultor de vendas especializado em ${session.session_name}.

Seu objetivo:
- Ajudar clientes a encontrar produtos ideais
- Esclarecer d√∫vidas sobre pre√ßos e condi√ß√µes
- Guiar o processo de compra de forma natural
- Criar relacionamento de confian√ßa com o cliente

T√©cnicas de vendas:
- Fa√ßa perguntas para entender necessidades
- Destaque benef√≠cios, n√£o apenas caracter√≠sticas
- Use depoimentos e provas sociais quando relevante
- Crie senso de urg√™ncia quando apropriado`
      },
      support: {
        name: 'üõ†Ô∏è Suporte T√©cnico',
        prompt: `Voc√™ √© um especialista em suporte t√©cnico da ${session.session_name}.

Sua expertise:
- Diagnosticar problemas t√©cnicos
- Fornecer solu√ß√µes passo a passo
- Explicar procedimentos de forma did√°tica
- Escalar problemas complexos quando necess√°rio

Metodologia:
- Sempre confirme o entendimento do problema
- Ofere√ßa solu√ß√µes em ordem de simplicidade
- Use linguagem t√©cnica apropriada ao n√≠vel do usu√°rio
- Documente solu√ß√µes aplicadas`
      },
      personal: {
        name: 'üë§ Assistente Pessoal',
        prompt: `Voc√™ √© um assistente pessoal amig√°vel chamado ${session.session_name}.

Sua personalidade:
- Descontra√≠do mas respeitoso
- Curioso sobre os interesses do usu√°rio
- Prestativo em diversas √°reas
- Mant√©m conversas interessantes

Capacidades:
- Responder perguntas gerais
- Dar sugest√µes e conselhos
- Ajudar com planejamento e organiza√ß√£o
- Conversar sobre diversos t√≥picos`
      },
      educational: {
        name: 'üéì Tutor Educacional',
        prompt: `Voc√™ √© um tutor educacional especializado, representando ${session.session_name}.

Sua miss√£o:
- Explicar conceitos de forma clara e did√°tica
- Adaptar explica√ß√µes ao n√≠vel do estudante
- Incentivar o aprendizado ativo
- Avaliar compreens√£o atrav√©s de perguntas

Metodologia pedag√≥gica:
- Use exemplos pr√°ticos e analogias
- Quebre conceitos complexos em partes simples
- Estimule questionamentos e curiosidade
- Forne√ßa exerc√≠cios e atividades pr√°ticas`
      }
    };

    const choices = Object.entries(templates).map(([key, template]) => ({
      name: template.name,
      value: key
    }));

    choices.push(new inquirer.Separator(), { name: 'üîô Voltar', value: 'back' });

    const { selectedTemplate } = await inquirer.prompt([{
      type: 'list',
      name: 'selectedTemplate',
      message: 'Selecione um template:',
      choices
    }]);

    if (selectedTemplate === 'back') return;

    const template = templates[selectedTemplate as keyof typeof templates];

    console.log('\nüìÑ Preview do template:');
    console.log(chalk.yellow(template.prompt));

    const { confirm } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Aplicar este template?',
      default: true
    }]);

    if (confirm) {
      // Salvar no banco
      const { error } = await supabase
        .from('whatsapp_sessions')
        .update({ custom_prompt: template.prompt })
        .eq('session_name', session.session_name);

      if (error) {
        console.log(chalk.red(`‚ùå Erro ao aplicar template: ${error.message}`));
      } else {
        console.log(chalk.green('‚úÖ Template aplicado com sucesso!'));
      }
    }

    await this.waitForKey();
  }

  /**
   * Remove prompt personalizado
   */
  private async removeCustomPrompt(session: any): Promise<void> {
    const { confirm } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Tem certeza que deseja remover o prompt personalizado?',
      default: false
    }]);

    if (confirm) {
      const { error } = await supabase
        .from('whatsapp_sessions')
        .update({ custom_prompt: null })
        .eq('session_name', session.session_name);

      if (error) {
        console.log(chalk.red(`‚ùå Erro ao remover prompt: ${error.message}`));
      } else {
        console.log(chalk.green('‚úÖ Prompt personalizado removido! Ser√° usado o prompt padr√£o.'));
      }

      await this.waitForKey();
    }
  }

  /**
   * Edita configura√ß√µes gerais da sess√£o
   */
  private async editGeneralConfig(session: any): Promise<void> {
    console.log(chalk.blue('üìä CONFIGURA√á√ïES GERAIS'));
    console.log(chalk.gray('‚îÄ'.repeat(28)));

    const questions = [
      {
        type: 'input',
        name: 'phone_number',
        message: 'N√∫mero do WhatsApp:',
        default: session.phone_number || '',
        validate: (value: string) => {
          if (!value.trim()) return true; // Opcional
          if (!/^\d{10,15}$/.test(value.replace(/\D/g, ''))) return 'N√∫mero inv√°lido';
          return true;
        }
      },
      {
        type: 'confirm',
        name: 'is_active',
        message: 'Sess√£o ativa?',
        default: session.is_active
      },
      {
        type: 'number',
        name: 'max_messages',
        message: 'Limite m√°ximo de mensagens por conversa:',
        default: session.max_messages || 100,
        validate: (value: number) => {
          if (value < 10 || value > 1000) return 'Entre 10 e 1000 mensagens';
          return true;
        }
      }
    ];

    const answers = await inquirer.prompt(questions);

    // Salvar no banco
    const { error } = await supabase
      .from('whatsapp_sessions')
      .update({
        phone_number: answers.phone_number || null,
        is_active: answers.is_active,
        max_messages: answers.max_messages
      })
      .eq('session_name', session.session_name);

    if (error) {
      console.log(chalk.red(`‚ùå Erro ao salvar configura√ß√µes gerais: ${error.message}`));
    } else {
      console.log(chalk.green('‚úÖ Configura√ß√µes gerais atualizadas!'));
    }

    await this.waitForKey();
  }

  /**
   * Visualiza configura√ß√£o atual
   */
  private async viewCurrentConfig(session: any): Promise<void> {
    console.log(chalk.blue('üëÅÔ∏è  CONFIGURA√á√ÉO ATUAL DA SESS√ÉO'));
    console.log(chalk.gray('‚îÄ'.repeat(40)));

    console.log(`${chalk.bold('Nome:')} ${session.session_name}`);
    console.log(`${chalk.bold('Telefone:')} ${session.phone_number || 'N√£o definido'}`);
    console.log(`${chalk.bold('Status:')} ${session.is_active ? chalk.green('Ativo') : chalk.red('Inativo')}`);
    console.log(`${chalk.bold('Limite de mensagens:')} ${session.max_messages || 100}`);
    
    console.log(chalk.blue('\nü§ñ Configura√ß√µes de IA:'));
    if (session.ai_config) {
      console.log(`  Modelo: ${session.ai_config.model}`);
      console.log(`  Temperatura: ${session.ai_config.temperature}`);
      console.log(`  Max Tokens: ${session.ai_config.max_tokens}`);
      console.log(`  Prompt: ${session.ai_config.system_prompt?.substring(0, 100)}...`);
    } else {
      console.log('  Usando configura√ß√µes padr√£o');
    }

    console.log(chalk.blue('\n‚è±Ô∏è Configura√ß√µes de Timing:'));
    if (session.timing_config) {
      console.log(`  Tempo de resposta: ${session.timing_config.response_time}ms`);
      console.log(`  Delay mensagens: ${session.timing_config.message_delay}ms`);
      console.log(`  Per√≠odo descanso: ${session.timing_config.rest_period}ms`);
      console.log(`  Hor√°rio funcionamento: ${session.timing_config.working_hours?.start} - ${session.timing_config.working_hours?.end}`);
      console.log(`  Limite/hora: ${session.timing_config.message_limit_per_hour}`);
      console.log(`  Simula√ß√£o digita√ß√£o: ${session.timing_config.typing_simulation ? 'Sim' : 'N√£o'}`);
    } else {
      console.log('  Usando configura√ß√µes padr√£o');
    }

    if (session.custom_prompt) {
      console.log(chalk.blue('\nüìù Prompt Personalizado:'));
      console.log(chalk.yellow(session.custom_prompt.substring(0, 200) + '...'));
    }

    console.log(`\n${chalk.gray('Criada em:')} ${new Date(session.created_at).toLocaleString('pt-BR')}`);
    console.log(`${chalk.gray('Atualizada em:')} ${new Date(session.updated_at).toLocaleString('pt-BR')}`);

    await this.waitForKey();
  }

  /**
   * Edita configura√ß√µes globais de IA
   */
  async editGlobalAI(): Promise<void> {
    console.log(chalk.blue('ü§ñ CONFIGURA√á√ïES GLOBAIS DE IA'));
    console.log(chalk.gray('‚îÄ'.repeat(38)));
    console.log(chalk.yellow('Estas configura√ß√µes afetar√£o novas sess√µes criadas.'));
    console.log();

    // Aqui voc√™ pode implementar configura√ß√µes globais de IA
    // Por exemplo, keys das APIs, configura√ß√µes padr√£o, etc.
    
    await this.waitForKey();
  }

  /**
   * Edita configura√ß√µes globais de timing
   */
  async editGlobalTiming(): Promise<void> {
    console.log(chalk.blue('‚è±Ô∏è CONFIGURA√á√ïES GLOBAIS DE TIMING'));
    console.log(chalk.gray('‚îÄ'.repeat(42)));
    console.log(chalk.yellow('Estas configura√ß√µes afetar√£o novas sess√µes criadas.'));
    console.log();

    // Aqui voc√™ pode implementar configura√ß√µes globais de timing
    
    await this.waitForKey();
  }

  /**
   * Gera configura√ß√£o de timing baseada no wizard
   */
  private generateTimingFromWizard(answers: any, current: TimingConfig): TimingConfig {
    const configs = {
      business: {
        very_fast: { response_time: 800, message_delay: 300, rest_period: 120000 },
        fast: { response_time: 1500, message_delay: 500, rest_period: 180000 },
        human: { response_time: 2500, message_delay: 1000, rest_period: 240000 },
        slow: { response_time: 4000, message_delay: 1500, rest_period: 300000 }
      },
      sales: {
        very_fast: { response_time: 600, message_delay: 200, rest_period: 60000 },
        fast: { response_time: 1000, message_delay: 400, rest_period: 120000 },
        human: { response_time: 2000, message_delay: 800, rest_period: 180000 },
        slow: { response_time: 3500, message_delay: 1200, rest_period: 240000 }
      },
      education: {
        very_fast: { response_time: 1000, message_delay: 500, rest_period: 180000 },
        fast: { response_time: 2000, message_delay: 1000, rest_period: 240000 },
        human: { response_time: 3500, message_delay: 1500, rest_period: 300000 },
        slow: { response_time: 5000, message_delay: 2000, rest_period: 420000 }
      },
      personal: {
        very_fast: { response_time: 500, message_delay: 200, rest_period: 60000 },
        fast: { response_time: 1200, message_delay: 600, rest_period: 120000 },
        human: { response_time: 2500, message_delay: 1200, rest_period: 240000 },
        slow: { response_time: 4500, message_delay: 2000, rest_period: 360000 }
      },
      technical: {
        very_fast: { response_time: 1200, message_delay: 600, rest_period: 180000 },
        fast: { response_time: 2000, message_delay: 1000, rest_period: 240000 },
        human: { response_time: 3000, message_delay: 1500, rest_period: 300000 },
        slow: { response_time: 5000, message_delay: 2500, rest_period: 420000 }
      }
    };

    const baseConfig = configs[answers.usage_type as keyof typeof configs][answers.response_style as keyof typeof configs.business];
    
    // Ajustes baseados no volume
    const volumeMultiplier = {
      high: 0.7,   // Mais r√°pido para alto volume
      medium: 1.0, // Padr√£o
      low: 1.3     // Mais lento para baixo volume
    };

    const multiplier = volumeMultiplier[answers.volume as keyof typeof volumeMultiplier];

    return {
      response_time: Math.round(baseConfig.response_time * multiplier),
      message_delay: Math.round(baseConfig.message_delay * multiplier),
      rest_period: Math.round(baseConfig.rest_period * multiplier),
      working_hours: current.working_hours || { start: '08:00', end: '22:00' },
      message_limit_per_hour: answers.volume === 'high' ? 200 : answers.volume === 'medium' ? 100 : 50,
      typing_simulation: answers.typing_simulation
    };
  }

  /**
   * Exibe preview das configura√ß√µes de timing
   */
  private displayTimingPreview(config: TimingConfig): void {
    console.log(`  ‚è±Ô∏è Tempo de resposta: ${chalk.cyan(config.response_time)}ms`);
    console.log(`  ‚è≥ Delay mensagens: ${chalk.cyan(config.message_delay)}ms`);
    console.log(`  üò¥ Descanso: ${chalk.cyan(Math.round(config.rest_period / 1000))}s`);
    console.log(`  üïê Hor√°rio: ${chalk.cyan(config.working_hours?.start)} √†s ${chalk.cyan(config.working_hours?.end)}`);
    console.log(`  üìä Limite/hora: ${chalk.cyan(config.message_limit_per_hour)} msgs`);
    console.log(`  ‚å®Ô∏è Digita√ß√£o: ${config.typing_simulation ? chalk.green('Sim') : chalk.red('N√£o')}`);
  }

  /**
   * Editor de texto para prompts (multilinhas)
   */
  private async customPromptEditor(currentPrompt: string = ''): Promise<string> {
    console.log(chalk.blue('\n‚úèÔ∏è  EDITOR DE PROMPT'));
    console.log(chalk.gray('‚îÄ'.repeat(25)));
    console.log(chalk.yellow('üí° Dicas:'));
    console.log(chalk.yellow('  ‚Ä¢ Digite o prompt completo (pode ser longo)'));
    console.log(chalk.yellow('  ‚Ä¢ Use \\n para quebras de linha dentro do texto'));
    console.log(chalk.yellow('  ‚Ä¢ Digite "CANCELAR" para manter o atual'));
    console.log(chalk.yellow('  ‚Ä¢ Digite "LIMPAR" para come√ßar do zero'));
    console.log();

    if (currentPrompt) {
      console.log(chalk.blue('üìÑ Prompt atual:'));
      console.log(chalk.gray('‚îÄ'.repeat(15)));
      console.log(chalk.cyan(this.formatPromptPreview(currentPrompt)));
      console.log();
    }

    const { action } = await inquirer.prompt([{
      type: 'list',
      name: 'action',
      message: 'O que deseja fazer?',
      choices: [
        { name: '‚úèÔ∏è  Editar Prompt', value: 'edit' },
        { name: 'üìã Usar Template', value: 'template' },
        { name: 'üóëÔ∏è  Limpar e Come√ßar do Zero', value: 'clear' },
        { name: '‚ùå Cancelar (manter atual)', value: 'cancel' }
      ]
    }]);

    switch (action) {
      case 'edit':
        return await this.inputLongText('Digite o novo prompt:', currentPrompt);
      
      case 'template':
        console.log(chalk.yellow('üîß Funcionalidade de templates ser√° implementada em breve'));
        return currentPrompt;
      
      case 'clear':
        return await this.inputLongText('Digite o prompt do zero:', '');
      
      case 'cancel':
      default:
        return currentPrompt;
    }
  }

  /**
   * Input para textos longos com confirma√ß√£o
   */
  private async inputLongText(message: string, defaultText: string = ''): Promise<string> {
    console.log(chalk.blue(`\nüìù ${message}`));
    console.log(chalk.gray('‚îÄ'.repeat(30)));
    
    if (defaultText) {
      console.log(chalk.yellow('Texto atual:'));
      console.log(chalk.cyan(this.formatPromptPreview(defaultText)));
      console.log();
    }

    const { newText } = await inquirer.prompt([{
      type: 'input',
      name: 'newText',
      message: 'Digite o prompt (use \\n para quebras de linha):',
      default: defaultText,
      validate: (value: string) => {
        const actualText = value.replace(/\\n/g, '\n').trim();
        if (actualText.length < 10) return 'Prompt deve ter pelo menos 10 caracteres';
        return true;
      }
    }]);

    // Converter \n em quebras de linha reais
    const processedText = newText.replace(/\\n/g, '\n');
    
    // Mostrar preview
    console.log(chalk.green('\n‚úÖ Preview do prompt:'));
    console.log(chalk.gray('‚îÄ'.repeat(20)));
    console.log(chalk.cyan(this.formatPromptPreview(processedText)));
    console.log();

    const { confirm } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Confirma este prompt?',
      default: true
    }]);

    if (confirm) {
      return processedText;
    } else {
      // Tentar novamente
      return await this.inputLongText(message, newText);
    }
  }


  /**
   * Formata preview do prompt para exibi√ß√£o
   */
  private formatPromptPreview(text: string): string {
    // Limitar a 300 caracteres para preview
    if (text.length <= 300) return text;
    
    return text.substring(0, 300) + chalk.gray('... (continua)');
  }

  /**
   * Aguarda pressionar Enter
   */
  private async waitForKey(): Promise<void> {
    await inquirer.prompt([{
      type: 'input',
      name: 'continue',
      message: 'Pressione Enter para continuar...'
    }]);
  }
}

export const configurationEditor = new ConfigurationEditor();
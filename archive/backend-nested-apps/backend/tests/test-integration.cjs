require('dotenv').config();
const { sessionManager } = require('./dist/services/session.manager.cjs');
const { databaseService } = require('./dist/services/database.service.cjs');

async function testIntegration() {
  console.log('üöÄ Iniciando teste de integra√ß√£o completo...\n');

  const testPhone = '+5511999999999';
  const testSession = 'default';
  const testUserMessage = 'Ol√°, como voc√™ est√°?';
  const testAiMessage = 'Ol√°! Estou bem, obrigado por perguntar. Como posso ajud√°-lo hoje?';

  try {
    // 1. Verificar conex√£o com banco
    console.log('1. Verificando conex√£o com banco...');
    const sessions = await databaseService.getActiveSessions();
    console.log(`   ‚úÖ Conex√£o OK - ${sessions.length} sess√µes ativas`);

    // 2. Criar sess√£o 'default' se n√£o existir
    console.log('\n2. Verificando/criando sess√£o default...');
    let defaultSession = await sessionManager.getSession(testSession);
    
    if (!defaultSession) {
      console.log('   üìù Criando sess√£o default...');
      defaultSession = await sessionManager.createSession(testSession, {
        model: 'gpt-4',
        temperature: 0.7,
        max_tokens: 2000,
        system_prompt: 'Voc√™ √© um assistente inteligente via WhatsApp para testes.'
      });
    }
    
    if (defaultSession) {
      console.log(`   ‚úÖ Sess√£o default dispon√≠vel: ${defaultSession.session_name}`);
    } else {
      console.log('   ‚ùå Falha ao criar/obter sess√£o default');
      return;
    }

    // 3. Registrar usu√°rio
    console.log('\n3. Registrando usu√°rio...');
    const user = await sessionManager.registerUser(testPhone, testSession, {
      name: 'Usu√°rio Teste',
      profile_data: { test: true }
    });
    
    if (user) {
      console.log(`   ‚úÖ Usu√°rio registrado: ${user.phone_number}`);
    } else {
      console.log('   ‚ùå Falha ao registrar usu√°rio');
    }

    // 4. Obter ou criar conversa
    console.log('\n4. Obtendo/criando conversa...');
    const conversation = await sessionManager.getOrCreateConversation(testPhone, testSession);
    
    if (conversation) {
      console.log(`   ‚úÖ Conversa obtida/criada: ID ${conversation.id}`);
    } else {
      console.log('   ‚ùå Falha ao obter/criar conversa');
    }

    // 5. Salvar mensagem do usu√°rio
    console.log('\n5. Salvando mensagem do usu√°rio...');
    const userMessage = await sessionManager.saveMessage(
      testPhone, 
      testSession, 
      testUserMessage, 
      'user'
    );
    
    if (userMessage) {
      console.log(`   ‚úÖ Mensagem usu√°rio: ${userMessage.content}`);
    } else {
      console.log('   ‚ùå Mensagem usu√°rio: ERRO');
    }

    // 6. Salvar resposta da IA
    console.log('\n6. Salvando resposta da IA...');
    const aiMessage = await sessionManager.saveMessage(
      testPhone, 
      testSession, 
      testAiMessage, 
      'assistant'
    );
    
    if (aiMessage) {
      console.log(`   ‚úÖ Mensagem IA: ${aiMessage.content}`);
    } else {
      console.log('   ‚ùå Mensagem IA: ERRO');
    }

    // 7. Verificar hist√≥rico
    console.log('\n7. Verificando hist√≥rico...');
    const history = await sessionManager.getConversationHistory(testPhone, testSession, 10);
    console.log(`   ‚úÖ Hist√≥rico: ${history.length} mensagens`);
    
    // 8. Mostrar √∫ltimas mensagens
    console.log('\n8. √öltimas mensagens:');
    history.slice(-3).forEach((msg, index) => {
      console.log(`   ${index + 1}. [${msg.message_type}] ${msg.content}`);
    });

    // 9. Verificar dados nas tabelas
    console.log('\n9. Verificando dados nas tabelas...');
    
    try {
      const activeSessions = await databaseService.getActiveSessions();
      const sessionUsers = activeSessions.length > 0 ? 
        await databaseService.getUsersBySession(activeSessions[0].session_name) : [];
      
      // Verificar se sess√£o default existe
      let defaultSessionExists = false;
      try {
        const defaultSession = await databaseService.getSessionByName('default');
        defaultSessionExists = !!defaultSession;
      } catch (error) {
        console.log(`‚ùå Erro ao buscar sess√£o: ${JSON.stringify(error, null, 2)}`);
      }
      
      console.log('   üìä Estat√≠sticas finais:');
      console.log(`      - Sess√µes ativas: ${activeSessions.length}`);
      console.log(`      - Usu√°rios na sess√£o: ${sessionUsers.length}`);
      console.log(`      - Sess√£o 'default' ativa: ${defaultSessionExists ? 'SIM' : 'N√ÉO'}`);
      console.log(`      - Mensagens no hist√≥rico: ${history.length}`);
      
    } catch (error) {
      console.log(`   ‚ùå Erro ao verificar dados: ${error.message}`);
    }

  } catch (error) {
    console.error('‚ùå Erro durante teste:', error);
  }

  console.log('\nüéâ Teste de integra√ß√£o conclu√≠do!');
}

testIntegration();